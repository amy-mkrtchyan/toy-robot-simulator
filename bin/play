#!/usr/bin/env ruby

require_relative '../paths.inc.rb'
require_relative '../game.rb'

def file_mode(filepath)
  puts 'Welcome to the Game!'

  command_sets = YAML.load_file filepath
  command_sets.each do |name, set|
    puts "\n\n\nExecuting Command Set #{name}:"
    set.each do |cmd|
      puts "# > #{cmd}"
      handle_cmd(cmd, :f)
    end

  end
end


def interactive_mode
  puts 'Welcome to the Game!'
  print_commands
  puts "Let's start!"

  while true
    handle_cmd( get_cmd('# > '), :i )
  end
end


def print_help_and_exit
  puts <<-HELP
Usage: play [arguments]
  -i        Interactive mode
  -f file   Load actions from file
HELP
  exit(0)
end

def print_commands
  puts <<-WELCOME
Following are available command:
  PLACE x, y, direction   place robot on playground
                          'x' and 'y' are integer
                          direction can be one of ['north', 'east', 'south', 'west']
  MOVE                    move a step forward
  LEFT                    turn left
  RIGHT                   turn right
  REPORT                  report on current position
  QUIT                    quit the game
  HELP                    print available command

REMARK: command are case insensitive

WELCOME
end


def get_cmd(prefix)
  print prefix
  gets.strip
end


def print_error(e)
  puts "Oops! #{e.message}"
end


def get_arrow_for(f)
  case f
    when 'EAST' then ' ▶ '
    when 'NORTH' then ' ▲ '
    when 'WEST' then ' ◀ '
    when 'SOUTH' then ' ▼ '
end
end


def table_print(position)
  rows = Array.new($game.playboard_y) { Array.new($game.playboard_x, '   ')}

  pos_y = $game.playboard_y - position[:y] - 1
  rows[pos_y][position[:x]] = get_arrow_for(position[:f])

  table = Terminal::Table.new do |t|
    t.rows = rows
    t.style = {all_separators: true}
  end

  puts position.to_yaml, table
end


def extract_and_validate(cmd, &block)
  action, x, y, f = cmd.downcase.split(/\W+/).reject {|w| w.empty?}

  InputValidator.validate_numericality_of x, y if x || y
  InputValidator.validate_format_of f.upcase! if f

  yield action, x.to_i, y.to_i, f

rescue StandardError => e
  print_error e
end


def handle_cmd(cmd, mode)
  extract_and_validate(cmd) do |action, x, y, f|
    case action
      when 'report' then table_print($game.report)
      when 'place'  then $game.send(action, x, y, f)
      when 'left','right','move','quit' then $game.send(action)
    else
      mode == :i ? print_commands : (puts 'Bad Command!')
    end
  end
end

at_exit { puts "\n\n\nBye Human! See you later! \n\n\n" }

################   START   ################

$game = Game.new

case ARGV.shift
  when '-i' then interactive_mode
  when '-f' then file_mode(ARGV.shift)
  else print_help_and_exit
end
